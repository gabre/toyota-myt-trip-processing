# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.remote.webelement import WebElement
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.common.exceptions import NoSuchElementException, ElementClickInterceptedException
from dataclasses import dataclass
from typing import List

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

A_LOT_OF_TIME = 25

SITE_URL = "https://www.toyota.hu/"

EMAIL = "a@b.com"
PASSWORD = "xyz"

@dataclass
class Trip:
    """Class for keeping track of a trip."""
    name: str
    kilometers: str
    time: str
    avg: str

class ToyotaMyTSite():
  def setup(self):
    self.driver = webdriver.Chrome()
    self.implicit_wait_time = A_LOT_OF_TIME
    self.driver.implicitly_wait(self.implicit_wait_time)
    self.vars = {}
  
  def tear_down(self):
    self.driver.quit()

  def open_page(self):
    # 1 | open | / | 
    self.driver.get(SITE_URL)
    # 2 | setWindowSize | 1868x1291 | 
    self.driver.set_window_size(1868, 1291)
  
  def accept_GDPR(self):
    # 2 | click | xpath=//button[contains(.,'Elfogadom')] | 
    self.driver.find_element(By.XPATH, "//button[contains(.,\'Elfogadom\')]").click()

  def log_in(self):
    # 3 | click | xpath=//span[contains(.,'Fiók')] | 
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Fiók\')]").click()
    # 4 | click | xpath=//span[contains(.,'Bejelentkezés')] | 
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Bejelentkezés\')]").click()
    # 5 | type | id=login-email-input | hosszu.gabor90@gmail.com
    self.driver.find_element(By.ID, "login-email-input").send_keys(EMAIL)
    # 6 | type | id=login-password-input | Ez2C5UYqW7rkfg#619Nm
    self.driver.find_element(By.ID, "login-password-input").send_keys(PASSWORD)
    # 7 | click | css=.btn-action-primary | 
    self.driver.find_element(By.CSS_SELECTOR, ".btn-action-primary").click()
    self.driver.find_element(By.XPATH, "//h2[contains(text(), 'Üdvözöljük')]")
    time.sleep(2)

  def select_my_car(self):
    # 3 | click | xpath=//span[contains(.,'Fiók')] | 
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Fiók\')]").click()
    # 4 | click | linkText=Saját járművem | 
    self.driver.find_element(By.LINK_TEXT, "Saját járművem").click()
    # 5 | click | css=.cp_overviewListItemCar-vehicleImage-50 | 
    self.driver.find_element(By.CSS_SELECTOR, ".cp_overviewListItemCar-vehicleImage-50").click()

  def select_my_trips(self):
    # 6 | click | css=#card9 .or-card-content-title-container | 
    self.driver.find_element(By.CSS_SELECTOR, "#card9 .or-card-content-title-container").click()
    self.remove_last_two_week_filter()

  def remove_last_two_week_filter(self):
    try:
      self.driver.implicitly_wait(5)
      self.driver.find_element(By.XPATH, "//i[@class='icon icon-remove']").click()
      self.driver.implicitly_wait(self.implicit_wait_time)
    except NoSuchElementException:
      pass

  def close_trip_details(self):
    element = WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable((By.XPATH, "//div[@id='card9']/i")))
    action = ActionChains(self.driver)
    action.move_to_element(element).click().perform() 

  def ask_for_more_trips(self):
    # 8 | click | css=.or-more-information-container > .icon | 
    has_more = True
    while has_more:
      try:
        more = self.driver.find_element(By.CSS_SELECTOR, ".or-more-information-container")
        if more.text == "Mutass kevesebbet!":
          has_more = False
        else:
          more.click()
      except NoSuchElementException:
        has_more = False
      # except ElementClickInterceptedException:
      #   pass

  def get_info_for_trip(self, trip_offset: int) -> None | Trip:
    self.select_my_trips()
    self.ask_for_more_trips()
    trips = self.get_trips()
    trip_count = len(trips)
    if trip_offset + 1 > trip_count:
      return None
    this_trip = trips[trip_offset]
    action = ActionChains(self.driver)
    action.move_to_element(this_trip).click().perform() 
    this_trip_values = self.get_trip_values()
    return Trip(name = "", kilometers = this_trip_values[0].text, time = this_trip_values[1].text, avg = this_trip_values[2].text)
  
  def get_trips(self) -> List[WebElement]:
    return self.driver.find_elements(By.XPATH, "//div[@class='or-trip-details']")

  def get_trip_values(self) -> List[WebElement]:
    self.driver.find_element(By.XPATH, "//h5[contains(text(), 'Utazási előzmények')]")
    values = []
    sample_is_NaN = True
    while sample_is_NaN:
      values = self.driver.find_elements(By.XPATH, "//div[@class='or-trip-value']")
      sample_is_NaN = "nan" in values[0].text.lower()
    return values

myT = ToyotaMyTSite()
myT.setup()
myT.open_page()
myT.accept_GDPR()
myT.log_in()
myT.select_my_car()
myT.select_my_trips()

result = []
trip_offset = 0
trip_at_offset = {}
while trip_at_offset is not None:
  trip_at_offset = test.get_info_for_trip(trip_offset)
  myT.close_trip_details()
  trip_offset = trip_offset + 1
  result.append(trip_at_offset)
  print(trip_at_offset)

input("Press Enter to continue...")

myT.tear_down()